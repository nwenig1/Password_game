/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package passwordpuzzle;

import java.util.Scanner;






public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        boolean invalid_password = true; 
        boolean try_again = true; 
        Scanner scanner = new Scanner(System.in); 
        while(invalid_password && try_again){
            System.out.println("Enter your password: "); 
            String guess = scanner.nextLine();
            System.out.println(guess.contains("10♥J♥Q♥K♥A♥")); 
            invalid_password = checkWord_bool(guess); //check to see if word is valid 
            if(invalid_password){
                System.out.println(checkWord_str(guess)); //say why its invalid 
                System.out.println("Try another guess? (yes/no)");
                String repeat_char = scanner.nextLine();
                repeat_char=repeat_char.toUpperCase(); 
                if(repeat_char.equals("NO")){
                try_again = false; 
            }
        
            
        }

        }
        scanner.close(); 
        if(invalid_password == false){
            System.out.println("Password Accepted");
        }else{
            System.out.println("Thanks for Trying!");
        }

    }




    public static boolean checkWord_bool(String guess){ //Note: condition passing means it is an invalid password 
        if(guess.length()<=5){
            return true;  
        }else if(guess.replaceAll("[^0-9]","").length() == 0){
            return true; 
        }else if(guess.charAt(0) !='A'){
            return true; 
        }else if(!guess.contains("password")){
            return true; 
        }else if(guess.contains(" ")){
            return true;
        }
        else if(rule4(guess) !=17){
            return true; 
        }else if(guess.charAt(guess.length()-1)!='A'){
            return true;
         } else if(guess.length()>17){
            return true;
         } else if((guess.contains("State Farm") ||
                guess.contains("Liberty Mutual") ||
                guess.contains("IBM"))==false){
                    return true;
        }else if(guess.replaceAll("[a-zA-Z0-9]", "").length()!=6){
            return true; 
        }else if(!guess.contains("10♥J♥Q♥K♥A♥")){
            return true; 
        }
return false;
    }



    public static String checkWord_str(String guess){
        
        if(guess.length()<5){
            return "Rule 1: Password must have more than 5 or more characters"; 
        }else if(guess.replaceAll("[^0-9]","").length() == 0){
            return "Rule 2: Password must contain at least one number"; 
        }else if(guess.charAt(0) !='A'){
        return "Rule 3: Password must start with an A"; 
        }else if(!guess.contains("password")){
            return "Rule 4: Password must contain password"; 
        }else if(guess.contains(" ")){
            return "Rule 5: Password can't contain a space"; 
        }
        else if(rule4(guess) !=17){
            return "Rule 6: Sum of the digits must add up to 17";
        } else if(guess.charAt(guess.length()-1)!='A'){
            return "Rule 7: Password must start and end with the same character"; 
        }else if((guess.contains("State Farm") ||
                guess.contains("Liberty Mutual") ||
                guess.contains("IBM"))==false){
                return "Rule 8: Password must contain the name of one of our sponsors \n sponsors include:State Farm, Liberty Mutual, IBM "; 
        }else if(guess.replaceAll("[a-zA-Z0-9]", "").length()!=6){
            return "Rule 9: Password must contain 6 special characters"; 
    } else if(guess.contains("10♥J♥Q♥K♥A♥")==false){
        return "Rule 10: Password must contain a royal flush of hearts written in the format: \n number, suit, number suit";
    }
        
        
        
        
        else{
            return null; 
        }
    
    }
    public static int rule4(String guess){
        int sum=0; 
        String guess_nums = guess.replaceAll("[^0-9]", ""); 
        if(guess_nums.length()!=0){
        int nums = Integer.parseInt(guess_nums);
        while (nums != 0){
            sum = sum + nums % 10;
            nums = nums/10;
        
    }
}
    return sum;
}
}
